#--------------------------------------------------------------------------------------
# Dies ist eine einfache Konfigurationsdatei für den Redis Key/Value Store,
# um diesen als Ringpuffer zum Zwischenspeichern von Sensorwerten vor dem
# Versand via MQTT zu nutzen. Redis kann noch viel mehr. Für eine ausführliche
# Beschreibung aller Konfigurartionsoptionen siehe: https://redis.io/topics/config
#--------------------------------------------------------------------------------------

# Verbindungen nur über localhost oder Unix Domain Socket zulassen, so dass der
# Server nicht öffentlich erreichbar ist. Der Standard-Port für Redis ist 6379.
# Wenn der Port hier geändert wird, sollte die neue Portnummer im Dockerfile mit
# dem Befehl EXPOSE 4711 bekannt gemacht werden.
#bind 127.0.0.1 ::1
#port 6379
protected-mode no

unixsocket /tmp/redis.sock
unixsocketperm 755

# Datensicherung auf Platte. Hier verwenden wir etwas konservativere Werte als
# in der Beispielkonfiguration von Redis, da wir auf dem Raspberry Pi mit weniger
# anfallenden Daten rechnen.
#
# Die Parameter für save sind dabei so zu verstehen, dass der erste Wert die
# Anzahl der Sekunden angibt, nach denen gesichert werden soll, allerdings nur,
# wenn mindestens so viele Änderungen, wie im zweiten Parameter angegeben,
# vorliegen. Aus den Werten unten ergibt sich daher:
#
#   * Spätestens alle 15 Minuten (900 Sekunden) bei mindestens einer Änderung
#   * Nach fünf Minuten (300 Sekunden) bei mindestens zehn Änderungern
#   * Bereits nach einer Minute (60 Sekunden) bei mindestens 100 Änderungen
#
# Zu den genannten Zeitpunkten wird ein komplettes Datenbankabbild in die
# Datei redis.rdb geschrieben. Zusätzlich wird ein fortlaufendes Journal der
# ausgeführten Datenbankänderungen in die Datei redis.aof geschrieben, anhand
# dessen sich die Datenbank stets rekonstruieren lässt. Dies entspricht der
# Empfehlung aus der Redis-Dokumentation: https://redis.io/topics/persistence
save 900 1
save 300 10
save 60 100

dir /data
dbfilename redis.rdb

appendonly yes
appendfilename redis.aof
appendfsync everysec

# Größe der Datenbank begrenzen und älteste Einträge automatisch löschen.
# Für Details siehe: https://redis.io/topics/lru-cache
maxmemory 100mb
maxmemory-policy allkeys-lru